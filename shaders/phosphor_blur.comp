#version 430

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Input: inputTex (phosphor energy)
layout(binding = 0, r32ui) uniform uimage2D inputTex;
// Output: outputTex (phosphor energy)
layout(binding = 1, r32ui) uniform uimage2D outputTex;

uniform float line_blur_spread;
uniform float line_width;
uniform float range_factor;
uniform vec2 texSize;
uniform int blur_direction; // 0 = horizontal, 1 = vertical
uniform int kernel_type; // 0 = E kernel, 1 = F kernel, 2 = G kernel
uniform float f_intensity;
uniform float g_intensity;

const float PI = 3.14159265359;
const float INV_2PI = 0.15915494309; // 1/(2*PI)

void main() {
  ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
  ivec2 texSizeInt = ivec2(texSize);

  // Early bounds check
  if (coord.x >= texSizeInt.x || coord.y >= texSizeInt.y) {
    return;
  }

  // Early exit for very small blur spreads
  if (line_blur_spread < 0.01) {
    uint value = imageLoad(inputTex, coord).r;
    
    if (blur_direction == 1) {
      imageAtomicAdd(outputTex, coord, value);
    } else {
      imageStore(outputTex, coord, uvec4(uint(max(0.0, value)), 0, 0, 0));
    }
    return;
  }

  // Calculate filter size and clamp to prevent excessive divergence
  int range_filter = int(ceil(range_factor * line_blur_spread)) * 2 + 1;
  int half_range = range_filter / 2;
  
  // Fast exit for zero radius
  if (half_range == 0) {
    uint value = imageLoad(inputTex, coord).r;

    if (blur_direction == 1) {
      imageAtomicAdd(outputTex, coord, value);
    } else {
      imageStore(outputTex, coord, uvec4(uint(max(0.0, value)), 0, 0, 0));
    }
    return;
  }

  float inv_2variance, norm_factor;
  
  if (kernel_type == 0) {
    // E kernel (line_width based)
    float variance = line_width * line_width;
    inv_2variance = 1.0 / (2.0 * variance);
    norm_factor = INV_2PI / variance;
  } else if (kernel_type == 1) {
    // F kernel (line_blur_spread based)
    float equivalent_width = 0.693147 * (line_blur_spread * 0.1);
    float variance = (equivalent_width / 1.177) * (equivalent_width / 1.177);
    inv_2variance = 1.0 / (2.0 * variance);
    norm_factor = INV_2PI / variance;
  } else {
    // G kernel (range_filter based)
    float equivalent_width = 0.693147 * (float(range_filter) / 8.0);
    float variance = (equivalent_width / 1.177) * (equivalent_width / 1.177);
    inv_2variance = 1.0 / (2.0 * variance);
    norm_factor = INV_2PI / variance;
  }

  // Single kernel accumulation based on kernel_type
  float sample_sum = 0.0;
  float effective_kernel_sum = 0.0;

  if (half_range <= 3) {
    const ivec2 offset = (blur_direction == 0) ? ivec2(1, 0) : ivec2(0, 1);
    
    for (int i = -half_range; i <= half_range; ++i) {
      ivec2 sample_coord = coord + i * offset;
      float distance_sq = float(i * i);
      float kernel_weight = norm_factor * exp(-distance_sq * inv_2variance);
      
      // Check if this sample would be in bounds
      bool in_bounds = (sample_coord.x >= 0 && sample_coord.x < texSizeInt.x && 
                       sample_coord.y >= 0 && sample_coord.y < texSizeInt.y);
      
      if (in_bounds) {
        float sample_value = float(imageLoad(inputTex, sample_coord).r);
        sample_sum += sample_value * kernel_weight;
      }
      
      // Always accumulate kernel weight for proper normalization
      // This simulates the "missing" energy from out-of-bounds samples
      effective_kernel_sum += kernel_weight;
    }
  } else {
    // General case for larger kernels
    for (int i = -half_range; i <= half_range; ++i) {
      ivec2 sample_coord;
      if (blur_direction == 0) {
        sample_coord = coord + ivec2(i, 0);
      } else {
        sample_coord = coord + ivec2(0, i);
      }
      
      float distance_sq = float(i * i);
      float kernel_weight = norm_factor * exp(-distance_sq * inv_2variance);
      
      // Check if this sample would be in bounds
      bool in_bounds = (sample_coord.x >= 0 && sample_coord.x < texSizeInt.x && 
                       sample_coord.y >= 0 && sample_coord.y < texSizeInt.y);
      
      if (in_bounds) {
        float sample_value = float(imageLoad(inputTex, sample_coord).r);
        sample_sum += sample_value * kernel_weight;
      }
      
      // Always accumulate kernel weight for proper normalization
      // This simulates the "missing" energy from out-of-bounds samples
      effective_kernel_sum += kernel_weight;
    }
  }

  // Normalize by effective kernel sum which accounts for out-of-bounds samples
  // This prevents edge brightness explosion by properly accounting for missing energy
  float result = sample_sum / max(effective_kernel_sum, 1e-6);

  if (kernel_type == 1) {
    result *= f_intensity;
  } else if (kernel_type == 2) {
    result *= g_intensity;
  }

  // Write result
  if (blur_direction == 1) {
    imageAtomicAdd(outputTex, coord, uint(max(0.0, result)));
  } else {
    imageStore(outputTex, coord, uvec4(uint(max(0.0, result)), 0, 0, 0));
  }
}

#version 430

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, r32ui) uniform uimage2D energyTex;
layout(binding = 1, rgba8) uniform image2D colorTex;

uniform vec3 blackColor;
uniform vec3 beamColor;
uniform int enablePhosphorGrain;

// Precomputed constants
const float TANH_DIV_FACTOR = 4290000;
const float GRAIN_STRENGTH = 0.1;

// Natural phosphor grain noise using multiple octaves
float spatialGrain(vec2 coord) {
  // Normalize coordinates to avoid large number artifacts
  vec2 p = coord * 0.01;
  
  // Multiple octaves for more natural variation
  float noise = 0.0;
  float amplitude = 1.0;
  float frequency = 1.0;
  
  // Add 3 octaves of noise
  for (int i = 0; i < 3; i++) {
    vec2 q = p * frequency;
    noise += amplitude * (fract(sin(dot(q, vec2(127.1 + float(i) * 43.0, 311.7 + float(i) * 67.0))) * 43758.5453) - 0.5);
    amplitude *= 0.5;
    frequency *= 2.0;
  }
  
  return noise * GRAIN_STRENGTH;
}

// Fast tanh approximation for better performance
// Based on rational function approximation: tanh(x) ≈ x * (27 + x²) / (27 + 9*x²)
// This provides good accuracy for the range we're using while being much faster than native tanh
float fast_tanh(float x) {
  // Clamp input to prevent overflow
  x = clamp(x, -3.0, 3.0);
  
  float x2 = x * x;
  return x * (27.0 + x2) / (27.0 + 9.0 * x2);
}

// Tanh-based color mapping function
// Equivalent to MATLAB: map = [tanh(map_index*RGB(1)*multfactor);tanh(map_index*RGB(2)*multfactor);tanh(map_index*RGB(3)*multfactor)]'
// map = min(map,1);
vec3 tanhColormap(float mapIndex, vec3 baseColor) {
  vec3 result;
  result.r = fast_tanh(mapIndex * baseColor.r);
  result.g = fast_tanh(mapIndex * baseColor.g);
  result.b = fast_tanh(mapIndex * baseColor.b);
  
  // Clamp to [0,1] range (equivalent to min(map,1) in MATLAB)
  return clamp(result, 0.0, 1.0);
}

void main() {
  ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

  // Sample linear energy value
  float energyLinear = float(imageLoad(energyTex, coord).r);
  
  // Apply subtle spatial grain to the energy
  if (enablePhosphorGrain == 1) {
    float grain = spatialGrain(vec2(coord));
    energyLinear *= (1.0 + grain);
  }

  // Scale energy for tanh mapping
  energyLinear /= TANH_DIV_FACTOR;
  vec3 outColor = tanhColormap(energyLinear, beamColor);

  // add bg
  outColor = outColor + blackColor;
  outColor = clamp(outColor, 0.0, 1.0);

  // Write result to color texture
  imageStore(colorTex, coord, vec4(outColor, 1.0));
}

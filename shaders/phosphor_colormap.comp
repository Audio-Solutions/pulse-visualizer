#version 430

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, r32ui) uniform uimage2D energyTex;
layout(binding = 1, rgba8) uniform image2D colorTex;

uniform vec3 blackColor;
uniform vec3 beamColor;
uniform int enablePhosphorGrain;
uniform int enableCurvedScreen;
uniform float screenCurvature;
uniform float screenGapFactor;
uniform float grainStrength;
uniform float vignetteStrength;
uniform float chromaticAberrationStrength;
uniform ivec2 texSize;

// Precomputed constants
const float TANH_DIV_FACTOR = 4290000;

// CRT distortion function
// Simulates the curved surface of a CRT monitor
vec2 crtDistortion(vec2 uv) {
  // Normalize coordinates to [-1, 1] range
  vec2 centered = uv * 2.0 - 1.0;
  
  // Apply barrel distortion (pincushion for CRT)
  float distortion = screenCurvature;
  float r2 = dot(centered, centered);
  float distortionFactor = 1.0 + distortion * r2;
  
  // Apply distortion
  vec2 distorted = centered * distortionFactor;
  
  // Convert back to [0, 1] range
  return (distorted + 1.0) * 0.5;
}

// Calculate border mask with antialiasing
// Returns 1.0 for inside screen, 0.0 for outside, smooth transition at edges
float calculateBorderMask(vec2 uv, vec2 texelSize) {
  // Early return if no border is needed (both features disabled)
  if (enableCurvedScreen == 0 && screenGapFactor >= 1.0) {
    return 1.0; // No border, full screen content
  }
  
  // Apply screen gap factor to create border in the middle
  float gapOffset = (1.0 - screenGapFactor) * 0.5;
  vec2 scaledUV = (uv - gapOffset) / screenGapFactor;
  
  if (enableCurvedScreen == 0) {
    // No distortion - simple rectangular border with gap
    vec2 border = texelSize * 2.0; // Border thickness
    vec2 mask = smoothstep(0.0, border.x, scaledUV) * smoothstep(1.0, 1.0 - border.x, scaledUV) *
                smoothstep(0.0, border.y, scaledUV) * smoothstep(1.0, 1.0 - border.y, scaledUV);
    return mask.x * mask.y;
  }
  
  // With CRT distortion, we need to check if the distorted coordinate is within bounds
  vec2 distortedUV = crtDistortion(scaledUV);
  
  // Calculate the Jacobian to determine edge thickness
  vec2 epsilon = texelSize * 0.5;
  vec2 ddx = crtDistortion(scaledUV + vec2(epsilon.x, 0.0)) - crtDistortion(scaledUV - vec2(epsilon.x, 0.0));
  vec2 ddy = crtDistortion(scaledUV + vec2(0.0, epsilon.y)) - crtDistortion(scaledUV - vec2(0.0, epsilon.y));
  float area = abs(ddx.x * ddy.y - ddx.y * ddy.x);
  
  // Adaptive border thickness based on distortion
  float borderThickness = texelSize.x * 2.0 / max(area, 0.1);
  
  // Check if we're inside the distorted screen area
  float insideX = smoothstep(0.0, borderThickness, distortedUV.x) * 
                  smoothstep(1.0, 1.0 - borderThickness, distortedUV.x);
  float insideY = smoothstep(0.0, borderThickness, distortedUV.y) * 
                  smoothstep(1.0, 1.0 - borderThickness, distortedUV.y);
  
  return insideX * insideY;
}

// Antialiased sampling function
// Samples multiple points around the distorted coordinate to reduce aliasing
float sampleAntialiased(vec2 uv, vec2 texelSize) {
  // Apply screen gap factor scaling
  float gapOffset = (1.0 - screenGapFactor) * 0.5;
  vec2 scaledUV = (uv - gapOffset) / screenGapFactor;
  
  // Check if the scaled coordinate is within the valid range
  if (scaledUV.x < 0.0 || scaledUV.x > 1.0 || scaledUV.y < 0.0 || scaledUV.y > 1.0) {
    return 0.0; // Return black for out-of-bounds
  }
  
  // Calculate the distortion at the current pixel
  vec2 distortedUV = crtDistortion(scaledUV);
  
  // Check if the distorted coordinate is within bounds
  if (distortedUV.x < 0.0 || distortedUV.x > 1.0 || 
      distortedUV.y < 0.0 || distortedUV.y > 1.0) {
    return 0.0; // Return black for out-of-bounds
  }
  
  // Calculate the Jacobian of the distortion transformation
  // This helps us determine how much the sampling area is stretched
  vec2 epsilon = texelSize * 0.5;
  vec2 ddx = crtDistortion(scaledUV + vec2(epsilon.x, 0.0)) - crtDistortion(scaledUV - vec2(epsilon.x, 0.0));
  vec2 ddy = crtDistortion(scaledUV + vec2(0.0, epsilon.y)) - crtDistortion(scaledUV - vec2(0.0, epsilon.y));
  
  // Calculate the area of the transformed pixel
  float area = abs(ddx.x * ddy.y - ddx.y * ddy.x);
  
  float result = 0.0;
  float weightSum = 0.0;
  
  // Multi-sample antialiasing
  for (int i = 0; i < 8; i++) {
    for (int j = 0; j < 8; j++) {
      vec2 offset = vec2(float(i), float(j)) / float(8 - 1) - 0.5;
      vec2 sampleUV = scaledUV + offset * texelSize;
      vec2 distortedSampleUV = crtDistortion(sampleUV);
      
      // Check bounds
      if (distortedSampleUV.x >= 0.0 && distortedSampleUV.x <= 1.0 && 
          distortedSampleUV.y >= 0.0 && distortedSampleUV.y <= 1.0) {
        
        // Sample the energy texture at the distorted coordinate
        ivec2 sampleCoord = ivec2(distortedSampleUV * vec2(texSize));
        sampleCoord = clamp(sampleCoord, ivec2(0), texSize - 1);
        float energy = float(imageLoad(energyTex, sampleCoord).r);
        
        float weight = 1.0 / 64.0;
        result += energy * weight;
        weightSum += weight;
      }
    }
  }
  
  // Normalize by the actual weight sum to avoid darkening
  if (weightSum > 0.0) {
    result /= weightSum;
  }
  
  return result;
}

// Natural phosphor grain noise using multiple octaves
float spatialGrain(vec2 coord) {
  // Normalize coordinates to avoid large number artifacts
  vec2 p = coord * 0.01;
  
  // Multiple octaves for more natural variation
  float noise = 0.0;
  float amplitude = 1.0;
  float frequency = 1.0;
  
  // Add 3 octaves of noise
  for (int i = 0; i < 3; i++) {
    vec2 q = p * frequency;
    noise += amplitude * (fract(sin(dot(q, vec2(127.1 + float(i) * 43.0, 311.7 + float(i) * 67.0))) * 43758.5453) - 0.5);
    amplitude *= 0.5;
    frequency *= 2.0;
  }
  
  return noise * grainStrength;
}

// Fast tanh approximation for better performance
// Based on rational function approximation: tanh(x) ≈ x * (27 + x²) / (27 + 9*x²)
// This provides good accuracy for the range we're using while being much faster than native tanh
float fast_tanh(float x) {
  // Clamp input to prevent overflow
  x = clamp(x, -3.0, 3.0);
  
  float x2 = x * x;
  return x * (27.0 + x2) / (27.0 + 9.0 * x2);
}

// Tanh-based color mapping function
// Equivalent to MATLAB: map = [tanh(map_index*RGB(1)*multfactor);tanh(map_index*RGB(2)*multfactor);tanh(map_index*RGB(3)*multfactor)]'
// map = min(map,1);
vec3 tanhColormap(float mapIndex, vec3 baseColor) {
  vec3 result;
  result.r = fast_tanh(mapIndex * baseColor.r);
  result.g = fast_tanh(mapIndex * baseColor.g);
  result.b = fast_tanh(mapIndex * baseColor.b);
  
  // Clamp to [0,1] range (equivalent to min(map,1) in MATLAB)
  return clamp(result, 0.0, 1.0);
}

// Helper function for direct sampling (move outside main)
float getEnergy(vec2 sampleUV, float screenGapFactor, ivec2 texSize) {
  if (screenGapFactor < 1.0) {
    float gapOffset = (1.0 - screenGapFactor) * 0.5;
    vec2 scaledUV = (sampleUV - gapOffset) / screenGapFactor;
    if (scaledUV.x >= 0.0 && scaledUV.x <= 1.0 && scaledUV.y >= 0.0 && scaledUV.y <= 1.0) {
      ivec2 sampleCoord = ivec2(scaledUV * vec2(texSize));
      sampleCoord = clamp(sampleCoord, ivec2(0), texSize - 1);
      return float(imageLoad(energyTex, sampleCoord).r);
    } else {
      return 0.0;
    }
  } else {
    ivec2 sampleCoord = ivec2(sampleUV * vec2(texSize));
    sampleCoord = clamp(sampleCoord, ivec2(0), texSize - 1);
    return float(imageLoad(energyTex, sampleCoord).r);
  }
}

float tanhColormapChannel(float mapIndex, float baseColor) {
  return clamp(fast_tanh(mapIndex * baseColor), 0.0, 1.0);
}

void main() {
  ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
  vec2 uv = vec2(coord) / vec2(texSize);
  vec2 texelSize = 1.0 / vec2(texSize);

  // Calculate border mask
  float screenMask = calculateBorderMask(uv, texelSize);

  vec2 center = vec2(0.5, 0.5);
  vec2 toCenter = uv - center;
  
  vec2 uvR, uvG, uvB;
  if (chromaticAberrationStrength == 0.0) {
    uvR = uv;
    uvG = uv;
    uvB = uv;
  } else {
    uvR = uv + toCenter * chromaticAberrationStrength;
    uvG = uv;
    uvB = uv - toCenter * chromaticAberrationStrength;
  }

  float energyR, energyG, energyB;

  if (enableCurvedScreen == 1) {
    energyR = sampleAntialiased(uvR, texelSize);
    energyG = sampleAntialiased(uvG, texelSize);
    energyB = sampleAntialiased(uvB, texelSize);
  } else {
    energyR = getEnergy(uvR, screenGapFactor, texSize);
    energyG = getEnergy(uvG, screenGapFactor, texSize);
    energyB = getEnergy(uvB, screenGapFactor, texSize);
  }

  // Apply normalized spatial grain to the energy, affecting both brighter and darker directions
  if (enablePhosphorGrain == 1) {
    float grain = spatialGrain(vec2(coord));
    energyR *= (1.0 + grain);
    energyG *= (1.0 + grain);
    energyB *= (1.0 + grain);
  }

  // Scale energy for tanh mapping
  energyR /= TANH_DIV_FACTOR;
  energyG /= TANH_DIV_FACTOR;
  energyB /= TANH_DIV_FACTOR;

  // Map to color using tanhColormap per channel
  vec3 screenColor;
  screenColor.r = tanhColormapChannel(energyR, beamColor.r);
  screenColor.g = tanhColormapChannel(energyG, beamColor.g);
  screenColor.b = tanhColormapChannel(energyB, beamColor.b);

  // add bg
  screenColor = screenColor + blackColor;
  screenColor = clamp(screenColor, 0.0, 1.0);

  // Calculate border color (70% of background color)
  vec3 borderColor = blackColor * 0.7;

  // Blend between screen content and border based on mask
  vec3 outColor = mix(borderColor, screenColor, screenMask);

  // Vignette effect
  if (vignetteStrength > 0.0) {
    float vignette = smoothstep(1.0, 0.2, length(toCenter) / 0.707);
    vignette = mix(1.0, vignette, vignetteStrength);
    outColor = mix(blackColor * 0.7, outColor, vignette);
  }

  // Write result to color texture
  imageStore(colorTex, coord, vec4(outColor, 1.0));
}

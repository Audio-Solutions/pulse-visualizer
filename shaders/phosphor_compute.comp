#version 430

// Input: spline vertices with position and energy
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Uniforms
uniform float pixelWidth; // Width of a single pixel in world coordinates
uniform ivec2 texSize; // Size of the energy texture

// Input buffer: spline vertices with position and energy
layout(std430, binding = 0) restrict readonly buffer SplineVertexBuffer {
  vec4 vertices[]; // x, y, intensityLinear, dwellTime
};

// Output texture: single-channel R32UI for linear energy accumulation
layout(r32ui, binding = 0) restrict uniform uimage2D energyTex;
// Output texture: single-channel R32UI for age accumulation
layout(r32ui, binding = 1) restrict uniform uimage2D ageTex;

bool inBounds(ivec2 coord) {
  return coord.x >= 0 && coord.x < texSize.x && coord.y >= 0 && coord.y < texSize.y;
}

void main() {
  uint index = gl_GlobalInvocationID.x;
  uint vertexCount = vertices.length();
  
  // Early exit with single comparison
  if (index >= vertexCount) return;

  vec4 vertex = vertices[index];
  vec2 pos = vertex.xy;
  float segmentEnergyLinear = vertex.z;
  
  // Early exit if no next vertex
  if (index + 1 >= vertexCount) return;
  
  vec4 nextVertex = vertices[index + 1];
  vec2 nextPos = nextVertex.xy;

  // Calculate direction and distance
  vec2 direction = nextPos - pos;
  float distance = length(direction);

  // Early exit if no distance to avoid division by zero
  if (distance <= 0.0) return;

  direction *= 1.0 / distance; // Normalize direction
  int numSteps = min(256, max(1, int(ceil(distance / pixelWidth))));
  vec2 stepSize = direction * (distance / float(numSteps));
  
  // Total energy for this segment is proportional to its length
  uint totalSegmentEnergy = uint(segmentEnergyLinear * distance * 4.29e9);
  
  // Distribute energy evenly across all steps to maintain constant energy density
  uint energyPerStep = max(1u, totalSegmentEnergy / uint(numSteps));
  
  // Interpolate along the segment
  for (int i = 0; i < numSteps; ++i) {
    vec2 interpPos = pos + stepSize * float(i);
    
    // Get the base pixel coordinate (floor) and fractional part
    ivec2 baseCoord = ivec2(floor(interpPos));
    vec2 fract = interpPos - vec2(baseCoord);

    // Precompute bilinear weights
    float inv_fx = 1.0 - fract.x;
    float inv_fy = 1.0 - fract.y;
    
    // Top-left (0,0)
    ivec2 coord00 = baseCoord;
    uint energy = uint(float(energyPerStep) * (inv_fx * inv_fy));
    if (energy > 100u && inBounds(coord00)) {
      imageAtomicAdd(energyTex, coord00, energy);
      imageStore(ageTex, coord00, uvec4(0));
    }
    
    // Top-right (1,0)
    ivec2 coord10 = baseCoord + ivec2(1, 0);
    energy = uint(float(energyPerStep) * (fract.x * inv_fy));
    if (energy > 100u && inBounds(coord10)) {
      imageAtomicAdd(energyTex, coord10, energy);
      imageStore(ageTex, coord10, uvec4(0));
    }
    
    // Bottom-left (0,1)
    ivec2 coord01 = baseCoord + ivec2(0, 1);
    energy = uint(float(energyPerStep) * (inv_fx * fract.y));
    if (energy > 100u && inBounds(coord01)) {
      imageAtomicAdd(energyTex, coord01, energy);
      imageStore(ageTex, coord01, uvec4(0));
    }

    // Bottom-right (1,1)
    ivec2 coord11 = baseCoord + ivec2(1, 1);
    energy = uint(float(energyPerStep) * (fract.x * fract.y));
    if (energy > 100u && inBounds(coord11)) {
      imageAtomicAdd(energyTex, coord11, energy);
      imageStore(ageTex, coord11, uvec4(0));
    }
  }
}
